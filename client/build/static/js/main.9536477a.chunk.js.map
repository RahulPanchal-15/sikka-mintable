{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loading","kycAddress","tokenSaleAddress","totalSupply","userTokens","inputAmount","isOwner","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","sikkaInstance","Contract","Sikka","abi","networks","address","sikkaSaleInstance","SikkaTokenSale","kycInstance","KycContract","methods","owner","call","listenToTokenTransfer","setState","loaded","updateFunction","alert","error","updateUserTokens","balanceOf","updateTotalSupply","events","Transfer","to","on","handleInputChange","event","target","value","type","clicked","name","handleKYCWhitelisting","setKycCompleted","send","from","handleBuyTokens","buyTokens","utils","toWei","toString","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9536477a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Sikka from \"./contracts/Sikka.json\";\nimport SikkaTokenSale from \"./contracts/SikkaTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\n\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = { \n    loading : false, \n    kycAddress: \"0x00000\", \n    tokenSaleAddress: null,\n    totalSupply: 0,\n    userTokens: 0,\n    inputAmount: 1,\n    isOwner : false\n  };\n\n  componentDidMount = async () => {\n    try {\n      \n      this.web3 = await getWeb3();\n\n      this.accounts = await this.web3.eth.getAccounts();\n\n      this.networkId = await this.web3.eth.net.getId();\n      \n      this.sikkaInstance = new this.web3.eth.Contract(\n        Sikka.abi,\n        Sikka.networks[this.networkId] && Sikka.networks[this.networkId].address,\n      );\n\n      this.sikkaSaleInstance = new this.web3.eth.Contract(\n        SikkaTokenSale.abi,\n        SikkaTokenSale.networks[this.networkId] && SikkaTokenSale.networks[this.networkId].address,\n      );\n\n      this.kycInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n\n      this.owner = await this.kycInstance.methods.owner().call();\n\n      this.listenToTokenTransfer();\n      this.setState({\n        loaded:true, \n        tokenSaleAddress:SikkaTokenSale.networks[this.networkId].address,\n        isOwner: this.owner === this.accounts[0]\n      }, \n        this.updateFunction );\n\n\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  updateFunction = () => {\n    this.updateUserTokens();\n  }\n\n  updateUserTokens = async() => {\n    let userTokens = await this.sikkaInstance.methods.balanceOf(this.accounts[0]).call();\n    this.setState({userTokens:userTokens});\n    this.updateTotalSupply();\n  }\n\n  updateTotalSupply = async() => {\n    let totalSupply = await this.sikkaInstance.methods.totalSupply().call();\n    this.setState({totalSupply:totalSupply});\n  }\n\n  listenToTokenTransfer = () => {\n    this.sikkaInstance.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateUserTokens)\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.clicked : target.value;\n    const name = target.name;\n    this.setState({\n      [name] : value\n    });\n  }\n\n  handleKYCWhitelisting = async() => {\n    await this.kycInstance.methods.setKycCompleted(this.state.kycAddress).send({from: this.accounts[0]});\n    alert(\"KYC Verification for \"+this.state.kycAddress+\" is completed!\");\n  }\n\n  handleBuyTokens = async() => {\n    await this.sikkaSaleInstance.methods.buyTokens(this.accounts[0])\n    .send({from: this.accounts[0], value : this.web3.utils.toWei(this.state.inputAmount.toString(),\"wei\")});\n  }\n\n\n  render() {\n    if (this.state.loading) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Sikka Token Sale</h1>\n        <p>\n          Get your Sikka Token today!\n        </p>\n        {this.state.isOwner && \n          <div>\n            <h2>Kyc Whitelisting</h2>\n            <p>\n              Address to allow : <input type = \"text\" name = \"kycAddress\" value = {this.state.kycAddress} onChange = {this.handleInputChange}/> \n              <button type = \"button\" onClick = {this.handleKYCWhitelisting}> Add to Whitelist </button> \n            </p>\n\n          </div>  \n        }\n\n        <h2>Total SIKKA supply  : {this.state.totalSupply}</h2>\n        <p>\n          If you want to buy tokens, send Wei to this address : {this.state.tokenSaleAddress} \n        </p>\n        <br/>\n        <h3> <p>You currently have {this.state.userTokens} SIKKA </p> </h3>\n        <p>I want <input type = \"text\" name = \"inputAmount\" value = {this.state.inputAmount} onChange={this.handleInputChange} /> WEI worth of SIK.</p>\n        <p><button type = \"button\" onClick = {this.handleBuyTokens}> BUY </button></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}